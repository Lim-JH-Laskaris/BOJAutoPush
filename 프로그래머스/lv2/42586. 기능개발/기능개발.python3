def day_needed(progress_and_speed):
    """음수 나눗셈을 이용하면 소요시간을 쉽게 구할 수 있다.
    양수 나눗셈을 할 경우 조건문으로 처리해주어야 하는 것들이 있을 수 있다.
    """
    progress,speed = progress_and_speed
    return -((progress - 100)//speed)

def deploy_schedule(days_needed):
    """ 배포순서대로 소요시간이 적힌 리스트를 입력으로 받고
    한번에 배포되는 단위별로 스케쥴을 정리하여 리스트로 리턴.
    앞선 작업을 하나씩 꺼내어 뒤의 작업과 비교하고, 
    뒤의 작업이 작거나같으면 한번에 배포할 수 있으므로 카운팅 후 그 뒤의 작업을 꺼내 다시 비교 반복,
    뒤의 작업이 더 크면 한번에 배포할 수 없으므로 지금까지 카운팅 된 작업수를 스케쥴 리스트에 담고 
    앞의 작업 변수를 지금의 뒤의 작업으로 업데이트 한뒤 새로운 작업을 꺼내 다시 비교반복.
    """
    prior_work = days_needed.pop(0)
    schedule = []
    deploy_at_once = 1
    while days_needed:
        subsequent_work = days_needed.pop(0)
        if subsequent_work <= prior_work : 
            deploy_at_once += 1 
        else : 
            schedule.append(deploy_at_once)
            deploy_at_once = 1
            prior_work = subsequent_work
    schedule.append(deploy_at_once)
    return schedule

def solution(progresses, speeds):
    days_needed = list(map(day_needed, zip(progresses,speeds)))
    return deploy_schedule(days_needed)